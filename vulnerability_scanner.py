import pyfiglet, argparse
import requests
import json
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from colorama import Fore, Style
import os

class WebScanner:
    def __init__(
        self,
        url,
        depth,
        enable_sqli,
        enable_xss,
        enable_csrf,
        scan_mode
    ):
        self.url = url
        self.depth = depth
        self._enable_sqli = enable_sqli
        self._enable_xss = enable_xss
        self._enable_csrf = enable_csrf
        self.scan_mode = scan_mode
        self._urls_visited = set()
        self.forms = []
        self.vulnerabilities = {"SQLi": [], "XSS": [], "CSRF": []}

    def crawl(self, url, depth=0):
        if depth > self.depth or url in self._urls_visited:
            return

        self._urls_visited.add(url)
        print(Fore.LIGHTGREEN_EX, f"[+] Crawling: {url}")

        try:
            _response = requests.get(url=url, timeout=5)
            soup = BeautifulSoup(_response.text, features="html.parser")
            self.forms.extend(soup.find_all("form"))
            links = [
                urljoin(url, link["href"]) for link in soup.find_all("a", href=True)
            ][:10]
            for link in links:
                self.crawl(url=link, depth=depth + 1)
        except requests.exceptions.RequestException as e:
            print(Fore.LIGHTRED_EX, f"[-] Error accessing {url}: {e}")

    def test_sql_injection(self):
        with open("payloads/sqli_payload.txt", "r") as sql_payload:
            payloads = sql_payload.read().split("\n")

        for form in self.forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            inputs = form.find_all("input")
            target_url = urljoin(base=self.url, url=action)

            for payload in payloads:
                data = {
                    input_tag.get("name", "default"): payload
                    for input_tag in inputs
                    if input_tag.get("type") != "submit"
                }
                response = (
                    requests.post(target_url, data=data)
                    if method == "post"
                    else requests.get(target_url, params=data)
                )

                if "error" in response.text.lower() or "sql" in response.text.lower():
                    print(
                        Fore.LIGHTYELLOW_EX,Style.BRIGHT,
                        f"[!] SQL Injection detected on {target_url} with", Fore.BLUE,f"payload {payload}",
                    )
                    self.vulnerabilities["SQLi"].append(
                        {"url": target_url, "payload": payload}
                    )

    def test_xss(self):
        with open("payloads/xss_payload.txt", "r") as xss_payload:
            payloads = xss_payload.read().split("\n")

        for form in self.forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            inputs = form.find_all("input")
            target_url = urljoin(self.url, action)

            for payload in payloads:
                data = {input_tag.get("name", "default"): payload for input_tag in inputs if input_tag.get("type") != "submit"}
                response = requests.post(target_url, data=data) if method == "post" else requests.get(target_url, params=data)

                if payload in response.text:
                    print(Fore.LIGHTRED_EX,Style.BRIGHT,f"[!] XSS vulnerability detected on {target_url} with",Fore.BLUE,f"payload {payload}")
                    self.vulnerabilities["XSS"].append({"url": target_url, "payload": payload})

    def test_csrf_vulnerability(self):
        for form in self.forms:
            inputs = form.find_all("input")
            has_csrf_token = any(
                input_tag.get("name", "").lower() in ["csrf", "token", "csrf_token"]
                for input_tag in inputs
            )
            if not has_csrf_token:
                action = form.get("action")
                target_url = urljoin(self.url, action)
                print(Fore.MAGENTA,Style.BRIGHT,f"[!] Possible CSRF vulnerability detected on {target_url}")
                self.vulnerabilities["CSRF"].append({"url": target_url})

    def generate_report(self):
        reports = {
            "SQLi": "sqli_report.json",
            "XSS": "xss_report.json",
            "CSRF": "csrf_report.json",
        }

        os.makedirs("output_reports", exist_ok=True)

        for vuln_type, filename in reports.items():
            findings = {
                "Test Type": vuln_type,
                "Scan Mode": self.scan_mode,
                "Crawled URLs": list(self._urls_visited),
                "Forms Found": len(self.forms),
                "Vulnerabilities": self.vulnerabilities[vuln_type],
            }

            if findings["Vulnerabilities"]:
                with open("output_reports/" + filename, "w") as f:
                    json.dump(findings, f, indent=4)
                print(Fore.GREEN,f"[+] {vuln_type} report saved to {filename}")

    def start_scan(self):
        print(Fore.LIGHTGREEN_EX, f"[+] Starting scan on {self.url} with depth {self.depth}")
        self.crawl(self.url)
        if self._enable_sqli:
            self.test_sql_injection()
        if self._enable_xss:
            self.test_xss()
        if self._enable_csrf:
            self.test_csrf_vulnerability()
        self.generate_report()

if __name__ == "__main__":
    pyfiglet.print_figlet("WEB SCANNER\n", colors="DEFAULT")
    parser = argparse.ArgumentParser(description="Optimized Web Vulnerability Scanner")
    parser.add_argument("url", help="Target URL to scan")
    parser.add_argument("--depth", type=int, default=0, help="Crawling depth (default: 0)")
    parser.add_argument("--sqli", action="store_true", help="Enable SQL Injection detection")
    parser.add_argument("--xss", action="store_true", help="Enable XSS detection")
    parser.add_argument("--csrf", action="store_true", help="Enable CSRF detection")
    parser.add_argument("--non-intrusive", action="store_true", help="Enable non-intrusive scan mode (XSS + CSRF only)")
    args = parser.parse_args()

    if args.non_intrusive:
        print(Fore.BLUE + "[*] Non-intrusive mode enabled: Only XSS and CSRF checks will be performed.")
        enable_sqli = False
        enable_xss = True
        enable_csrf = True
        scan_mode = "non-intrusive"
    else:
        enable_sqli = args.sqli
        enable_xss = args.xss
        enable_csrf = args.csrf
        scan_mode = "custom" if any([args.sqli, args.xss, args.csrf]) else "default"
        if not any([args.sqli, args.xss, args.csrf]):
            enable_sqli = enable_xss = enable_csrf = True

    scanner = WebScanner(args.url, args.depth, enable_sqli, enable_xss, enable_csrf, scan_mode)
    scanner.start_scan()
